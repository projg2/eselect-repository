# Copyright (c) 2017-2022 Michał Górny
# 2-clause BSD license

inherit config

DESCRIPTION="Manage repository list in repos.conf"
MAINTAINER="Michał Górny <mgorny@gentoo.org>"
VERSION=14

### directories

CACHEDIR=/tmp
SYSCONFDIR=/etc
SHAREDSTATEDIR=/var
HELPER="$(dirname "$(realpath "${BASH_SOURCE[0]}")")/eselect-repo-helper"
CONFIG="$(dirname "$(realpath "${BASH_SOURCE[0]}")")/eselect-repo.conf"

### helper functions

# Load all the configuration variables.
get_config() {
	local v vars=(
		REPOS_CONF REPOS_BASE
		REMOTE_LIST_URI REMOTE_LIST_CACHEDIR REMOTE_LIST_REFRESH OFFLINE_MODE
	)

	for v in "${vars[@]}"; do
		declare -g "${v}=$(load_config "${CONFIG}" "${v}")"
		[[ -n ${!v} ]] ||
			die "${v} not set by the configuration file (${CONFIG})"
	done

	if [[ ! -e ${REPOS_CONF} ]]; then
		mkdir -p "${REPOS_CONF}" || die
	fi
	# try to create it if necessary
	if [[ ! -d ${REMOTE_LIST_CACHEDIR} ]]; then
		mkdir -p "${REMOTE_LIST_CACHEDIR}" || die
	fi
	# it always has to end with /repositories.xml, so we only make
	# the directory configurable
	REMOTE_LIST_CACHE=${REMOTE_LIST_CACHEDIR}/repositories.xml
}

update_cache() {
	local refts

	if ! [ "${OFFLINE_MODE}" = "true" ]; then
		if [[ -f ${REMOTE_LIST_CACHE} ]]; then
			refts=$(( $(date '+%s') - REMOTE_LIST_REFRESH ))
			[[ $(find "${REMOTE_LIST_CACHE}" -newermt "@${refts}") ]] && return
		fi

		wget -N -P "${REMOTE_LIST_CACHEDIR}" "${REMOTE_LIST_URI}" ||
			die -q "unable to fetch repositories.xml"
		# we need to touch it since:
		# a. wget defaults to using server timestamp,
		# b. wget does not update the timestamp if the file did not change
		# on the server.
		# (If-Modified-Since will work with the current mtime anyway, unless
		# user's clock has drifted seriously)
		touch "${REMOTE_LIST_CACHE}"
	else
		# We need some sort of valid XML for the helper to work
		if [[ -f ${REMOTE_LIST_CACHE} ]]; then
			cat > ${REMOTE_LIST_CACHE} <<-EOF || die
				<?xml version="1.0" ?>
				<metadata>
				</metadata>
				EOF
		fi
	fi
}

run_helper() {
	"${HELPER}" \
		--repos-conf "${REPOS_CONF}" \
		--repositories-xml "${REMOTE_LIST_CACHE}" \
		"${@}" ||
		die -q "helper failed to run"
}

# Convert numerical repository indices in ${@}. Store resulting
# repository list as repos=() array.
convert_indices() {
	local have_numerical= r
	for r; do
		if is_number "${r}"; then
			have_numerical=1
		fi
	done

	if [[ ! ${have_numerical} ]]; then
		repos=( "${@}" )
		return
	fi

	[[ -f ${REMOTE_LIST_CACHE} ]] ||
		die -q "unable to use numerical indices before calling 'list'"

	# shift indexes to ease referencing
	local all_repos=( '' )
	local name state
	while read name state url; do
		all_repos+=( "${name}" )
	done < <(run_helper list)

	repos=()
	for r; do
		if is_number "${r}"; then
			repos+=( "${all_repos[r]}" )
		else
			repos+=( "${r}" )
		fi
	done
}

# Add the specified repository to repos.conf file.
# ${1} specifies the repository name.
# ${2} specifies the lines to append.
add_to_repos_conf() {
	local -x repository=${1}
	local new_lines=${2}

	local f
	# if repos.conf is a directory, create a dedicated subfile
	if [[ -d ${REPOS_CONF} ]]; then
		f=$(load_config "${CONFIG}" "REPOS_CONF_SUBFILE")
		[[ -n ${f} ]] ||
			die "REPOS_CONF_SUBFILE not set by the configuration file (${CONFIG})"
	else
		f=${REPOS_CONF}
	fi

	# note: the file must be non-empty for sed to work
	if [[ ! -s ${f} ]]; then
		echo "# created by eselect-repo" > "${f}" || die
	fi

	echo "Adding ${repository} to ${f} ..."
	sed -i -e "\$ a\\
${new_lines}" "${f}" || die
}

# Remove the specified repositories (${@}) from repos.conf file.
remove_from_repos_conf() {
	local expr='\('
	for r; do
		expr+="${r}\|"
	done
	expr="${expr%|})"

	local files=()
	if [[ -d ${REPOS_CONF} ]]; then
		# filter only to files containing the repos
		while IFS= read -r -d '' f; do
			[[ ${f} == *~ ]] && continue
			files+=( "${f}" )
		done < <(grep -Z -l "^\s*\[${expr}\]\s*\$" "${REPOS_CONF}"/*)
	else
		files=( "${REPOS_CONF}" )
	fi

	echo "Updating repos.conf ..."
	sed -n -i~ -e "/^\s*\[${expr}\]\s*\$/{b loop}; p; b;
			:loop {n;/^\s*[^\[]/b loop};" "${files[@]}" || die
}

### add action

## {{{
describe_add() {
	echo "Add a custom repository"
}

describe_add_parameters() {
	echo "<name> <sync-type> <sync-uri>"
}

describe_add_options() {
	echo "<name>      : Name of the repository to add"
	echo "<sync-type> : Syncer to use (e.g. git, rsync, svn...)"
	echo "<sync-uri>  : Sync URI"
}

do_add() {
	[[ ${#} -eq 3 ]] || die -q "incorrect parameters to add"

	local name=${1}
	local sync_type=${2}
	local sync_uri=${3}

	get_config

	local r state arg1 arg2
	while read r state arg1 arg2; do
		case ${state} in
			enabled)
				die -q "error: ${r}: repository already enabled, in ${arg1}"
				;;
		esac
	done < <(run_helper remote-metadata "${name}")

	# note: escape all the backslashes for sed, and add command
	# continuations
	local new_lines="\\
[${name//\\/\\\\}]\\
location = ${REPOS_BASE//\\/\\\\}/${name//\\/\\\\}\\
sync-type = ${sync_type//\\/\\\\}\\
sync-uri = ${sync_uri//\\/\\\\}"

	add_to_repos_conf "${name}" "${new_lines}"

	echo "Repository ${name} added"
}
## }}}

### create action

## {{{
describe_create() {
	echo "Create a local repository"
}

describe_create_parameters() {
	echo "<name> [<path>]"
}

describe_create_options() {
	echo "<name>      : Name of the new repository"
	echo "<path>      : Path to use (default: \${REPOS_BASE}/<name>)"
}

do_create() {
	[[ ${#} -eq 1 || ${#} -eq 2 ]] || die -q "incorrect parameters to create"

	get_config

	local name=${1}
	local path=${2:-${REPOS_BASE}/${name}}

	local r state arg1 arg2
	while read r state arg1 arg2; do
		case ${state} in
			enabled)
				die -q "error: ${r}: repository by that name already exists, in ${arg1}"
				;;
		esac
	done < <(run_helper remote-metadata "${name}")

	# create the repository boilerplate
	mkdir -p "${path}"/{metadata,profiles} || die
	echo "${name}" > "${path}"/profiles/repo_name || die
	# PMS says PMs must default to EAPI 0 if unset
	echo "8" > "${path}"/profiles/eapi || die
	cat > "${path}"/metadata/layout.conf <<-EOF || die
		masters = gentoo
		thin-manifests = true
		sign-manifests = false
	EOF

	# note: escape all the backslashes for sed, and add command
	# continuations
	local new_lines="\\
[${name//\\/\\\\}]\\
location = ${path//\\/\\\\}"

	add_to_repos_conf "${name}" "${new_lines}"

	echo "Repository ${name} created and added"
}
## }}}

### enable action

## {{{
describe_enable() {
	echo "Enable the specified repositories from the list"
}

describe_enable_parameters() {
	echo "(<name>|<index>)..."
}

describe_enable_options() {
	echo "<name>...  : Names of repositories to enable"
	echo "<index>... : Numeric index of the repository (from 'list' command)"
}

do_enable() {
	[[ ${#} -gt 0 ]] || die -q "no repositories specified"

	get_config
	convert_indices "${@}"
	update_cache

	local r state arg1 arg2 added=()
	while read r state arg1 arg2; do
		case ${state} in
			enabled)
				echo "error: ${r}: repository already enabled, in ${arg1}"
				continue
				;;
			not-exist)
				echo "error: ${r}: repository not in repositories.xml"
				continue
				;;
			unsupported)
				echo "error: ${r}: repository source VCS not supported"
				continue
				;;

		esac

		added+=( "${r}" )

		# note: escape all the backslashes for sed, and add command
		# continuations
		local new_lines="\\${new_lines:+
\\}
[${r//\\/\\\\}]\\
location = ${REPOS_BASE//\\/\\\\}/${r//\\/\\\\}\\
sync-type = ${arg1//\\/\\\\}\\
sync-uri = ${arg2//\\/\\\\}"
		add_to_repos_conf "${r}" "${new_lines}"
	done < <(run_helper remote-metadata "${repos[@]}")

	if [[ ${added[@]} ]]; then
		echo "${#added[@]} repositories enabled"
	fi
}
## }}}

### disable action

## {{{
describe_disable() {
	echo "Disable specified repositories without removing their contents"
}

describe_disable_parameters() {
	echo "[-f] (<name>|<index>)..."
}

describe_disable_options() {
	echo "-f         : Force potentially dangerous removals"
	echo "<name>...  : Names of repositories to disable"
	echo "<index>... : Numeric index of the repository (from 'list' command)"
}

do_disable() {
	local force
	if [[ ${1} == -f ]]; then
		force=1
		shift
	fi
	[[ ${#} -gt 0 ]] || die -q "no repositories specified"

	get_config
	convert_indices "${@}"

	local r state path removed=()
	while read r state path; do
		case ${state} in
			not-exist)
				echo "error: ${r}: repository not in repos.conf"
				continue
				;;
			local)
				if [[ ! ${force} ]]; then
					echo "error: ${r}: repository not in remote list, pass -f to force disabling"
					continue
				fi
				;;
			no-sync-uri)
				if [[ ! ${force} ]]; then
					echo "error: ${r}: repository has no sync-uri, pass -f to force disabling"
					continue
				fi
				;;
		esac

		removed+=( "${r}" )
	done < <(run_helper metadata "${repos[@]}")

	if [[ ${removed[@]} ]]; then
		remove_from_repos_conf "${removed[@]}"
		echo "${#removed[@]} repositories disabled"
	fi
}
## }}}

### remove action

## {{{
describe_remove() {
	echo "Remove installed repositories along with their contents"
}

describe_remove_parameters() {
	echo "[-f] (<name>|<index>)..."
}

describe_remove_options() {
	echo "-f         : Force potentially dangerous removals"
	echo "<name>...  : Names of repositories to remove"
	echo "<index>... : Numeric index of the repository (from 'list' command)"
}

do_remove() {
	local force
	if [[ ${1} == -f ]]; then
		force=1
		shift
	fi
	[[ ${#} -gt 0 ]] || die -q "no repositories specified"

	get_config
	convert_indices "${@}"

	local r state path removed=()
	while read r state path; do
		case ${state} in
			not-exist)
				echo "error: ${r}: repository not in repos.conf"
				continue
				;;
			local)
				if [[ ! ${force} ]]; then
					echo "error: ${r}: repository not in remote list, pass -f to force removal"
					continue
				fi
				;;
			no-sync-uri)
				if [[ ! ${force} ]]; then
					echo "error: ${r}: repository has no sync-uri, pass -f to force removal"
					continue
				fi
				;;
		esac

		# if path is empty, we still want to remove the config entry
		if [[ ${path} ]]; then
			echo "Removing ${path} ..."
			rm -r -f "${path}"
		fi

		removed+=( "${r}" )
	done < <(run_helper metadata "${repos[@]}")

	if [[ ${removed[@]} ]]; then
		remove_from_repos_conf "${removed[@]}"
		echo "${#removed[@]} repositories removed"
	fi
}
## }}}

### list action

## {{{
describe_list() {
	echo "List all repositories"
}

describe_list_parameters() {
	echo "[-i]"
}

describe_list_options() {
	echo "-i         : Only list installed"
}

do_list() {
	local only_installed
	if [[ ${1} == -i ]]; then
		only_installed=1
		shift
	fi
	get_config
	update_cache

	write_list_start "Available repositories:"
	local name state i=1
	while read name state url; do
		case ${state} in
			enabled)
				name=$(highlight_marker "${name}");;
			need-update)
				if ! is_output_mode brief; then
					name+=" $(highlight_warning '#')"
				fi
				;;
			local)
				name+=" $(highlight_warning '@')";;
			*)
				if [[ -n ${only_installed} ]]; then
					(( i++ ))
					continue
				fi
			;;
		esac
		write_numbered_list_entry "$(( i++ ))" \
			"${name}${url:+ $(highlight "(${url})")}"
	done < <(run_helper list)
}
## }}}

# vim: ts=4 sw=4 noet fdm=marker
